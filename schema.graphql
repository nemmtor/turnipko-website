# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"Node Interface"
interface Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

"An object with an ID"
interface TURNIPKO_Node {
    "The id of the object."
    id: ID!
    "The Stage of an object"
    stage: TURNIPKO_Stage!
}

type Directory implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type DirectoryConnection {
    distinct(field: DirectoryFieldsEnum!): [String!]!
    edges: [DirectoryEdge!]!
    group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type DirectoryEdge {
    next: Directory
    node: Directory!
    previous: Directory
}

type DirectoryGroupConnection {
    edges: [DirectoryEdge!]!
    field: String!
    fieldValue: String
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type File implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    childImageSharp: ImageSharp
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
    url: String
}

type FileConnection {
    distinct(field: FileFieldsEnum!): [String!]!
    edges: [FileEdge!]!
    group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FileEdge {
    next: File
    node: File!
    previous: File
}

type FileGroupConnection {
    edges: [FileEdge!]!
    field: String!
    fieldValue: String
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphCMS_Asset implements Node {
    children: [Node!]!
    createdAt: JSON!
    fileName: String!
    handle: String!
    height: Float
    id: ID!
    imageImg: [GraphCMS_Image!]!
    internal: Internal!
    localFile: File
    locale: GraphCMS_Locale!
    mimeType: String
    parent: Node
    publishedAt: JSON
    remoteId: ID!
    remoteTypeName: String!
    size: Float
    stage: GraphCMS_Stage!
    updatedAt: JSON!
    url: String!
    width: Float
}

type GraphCMS_AssetConnection {
    distinct(field: GraphCMS_AssetFieldsEnum!): [String!]!
    edges: [GraphCMS_AssetEdge!]!
    group(field: GraphCMS_AssetFieldsEnum!, limit: Int, skip: Int): [GraphCMS_AssetGroupConnection!]!
    nodes: [GraphCMS_Asset!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphCMS_AssetEdge {
    next: GraphCMS_Asset
    node: GraphCMS_Asset!
    previous: GraphCMS_Asset
}

type GraphCMS_AssetGroupConnection {
    edges: [GraphCMS_AssetEdge!]!
    field: String!
    fieldValue: String
    nodes: [GraphCMS_Asset!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphCMS_Image implements Node {
    category: GraphCMS_ImageCategory
    children: [Node!]!
    createdAt: JSON!
    description: String!
    id: ID!
    img: GraphCMS_Asset!
    internal: Internal!
    parent: Node
    publishedAt: JSON
    remoteId: ID!
    remoteTypeName: String!
    stage: GraphCMS_Stage!
    updatedAt: JSON!
}

type GraphCMS_ImageCategory implements Node {
    children: [Node!]!
    createdAt: JSON!
    id: ID!
    image: [GraphCMS_Image!]!
    internal: Internal!
    name: String!
    parent: Node
    publishedAt: JSON
    remoteId: ID!
    remoteTypeName: String!
    stage: GraphCMS_Stage!
    updatedAt: JSON!
}

type GraphCMS_ImageCategoryConnection {
    distinct(field: GraphCMS_ImageCategoryFieldsEnum!): [String!]!
    edges: [GraphCMS_ImageCategoryEdge!]!
    group(field: GraphCMS_ImageCategoryFieldsEnum!, limit: Int, skip: Int): [GraphCMS_ImageCategoryGroupConnection!]!
    nodes: [GraphCMS_ImageCategory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphCMS_ImageCategoryEdge {
    next: GraphCMS_ImageCategory
    node: GraphCMS_ImageCategory!
    previous: GraphCMS_ImageCategory
}

type GraphCMS_ImageCategoryGroupConnection {
    edges: [GraphCMS_ImageCategoryEdge!]!
    field: String!
    fieldValue: String
    nodes: [GraphCMS_ImageCategory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphCMS_ImageConnection {
    distinct(field: GraphCMS_ImageFieldsEnum!): [String!]!
    edges: [GraphCMS_ImageEdge!]!
    group(field: GraphCMS_ImageFieldsEnum!, limit: Int, skip: Int): [GraphCMS_ImageGroupConnection!]!
    nodes: [GraphCMS_Image!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphCMS_ImageEdge {
    next: GraphCMS_Image
    node: GraphCMS_Image!
    previous: GraphCMS_Image
}

type GraphCMS_ImageGroupConnection {
    edges: [GraphCMS_ImageEdge!]!
    field: String!
    fieldValue: String
    nodes: [GraphCMS_Image!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphQLSource implements Node {
    children: [Node!]!
    fieldName: String
    id: ID!
    internal: Internal!
    parent: Node
    typeName: String
}

type GraphQLSourceConnection {
    distinct(field: GraphQLSourceFieldsEnum!): [String!]!
    edges: [GraphQLSourceEdge!]!
    group(field: GraphQLSourceFieldsEnum!, limit: Int, skip: Int): [GraphQLSourceGroupConnection!]!
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphQLSourceEdge {
    next: GraphQLSource
    node: GraphQLSource!
    previous: GraphQLSource
}

type GraphQLSourceGroupConnection {
    edges: [GraphQLSourceEdge!]!
    field: String!
    fieldValue: String
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharp implements Node {
    children: [Node!]!
    fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
    fluid(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = NO_CHANGE,
        toFormatBase64: ImageFormat = NO_CHANGE,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpFluid
    id: ID!
    internal: Internal!
    original: ImageSharpOriginal
    parent: Node
    resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
    resolutions(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResolutions @deprecated(reason : "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
    sizes(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = NO_CHANGE,
        toFormatBase64: ImageFormat = NO_CHANGE,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpSizes @deprecated(reason : "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
}

type ImageSharpConnection {
    distinct(field: ImageSharpFieldsEnum!): [String!]!
    edges: [ImageSharpEdge!]!
    group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpEdge {
    next: ImageSharp
    node: ImageSharp!
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpFluid {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpGroupConnection {
    edges: [ImageSharpEdge!]!
    field: String!
    fieldValue: String
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type ImageSharpResolutions {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpSizes {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type Internal {
    content: String
    contentDigest: String!
    description: String
    fieldOwners: [String]
    ignoreType: Boolean
    mediaType: String
    owner: String!
    type: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    itemCount: Int!
    pageCount: Int!
    perPage: Int
    totalCount: Int!
}

type Query {
    allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
    allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
    allGraphCmsAsset(filter: GraphCMS_AssetFilterInput, limit: Int, skip: Int, sort: GraphCMS_AssetSortInput): GraphCMS_AssetConnection!
    allGraphCmsImage(filter: GraphCMS_ImageFilterInput, limit: Int, skip: Int, sort: GraphCMS_ImageSortInput): GraphCMS_ImageConnection!
    allGraphCmsImageCategory(filter: GraphCMS_ImageCategoryFilterInput, limit: Int, skip: Int, sort: GraphCMS_ImageCategorySortInput): GraphCMS_ImageCategoryConnection!
    allGraphQlSource(filter: GraphQLSourceFilterInput, limit: Int, skip: Int, sort: GraphQLSourceSortInput): GraphQLSourceConnection!
    allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
    allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
    allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
    allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
    allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
    directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
    file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput, url: StringQueryOperatorInput): File
    graphCmsAsset(children: NodeFilterListInput, createdAt: JSONQueryOperatorInput, fileName: StringQueryOperatorInput, handle: StringQueryOperatorInput, height: FloatQueryOperatorInput, id: StringQueryOperatorInput, imageImg: GraphCMS_ImageFilterListInput, internal: InternalFilterInput, localFile: FileFilterInput, locale: GraphCMS_LocaleQueryOperatorInput, mimeType: StringQueryOperatorInput, parent: NodeFilterInput, publishedAt: JSONQueryOperatorInput, remoteId: IDQueryOperatorInput, remoteTypeName: StringQueryOperatorInput, size: FloatQueryOperatorInput, stage: GraphCMS_StageQueryOperatorInput, updatedAt: JSONQueryOperatorInput, url: StringQueryOperatorInput, width: FloatQueryOperatorInput): GraphCMS_Asset
    graphCmsImage(category: GraphCMS_ImageCategoryFilterInput, children: NodeFilterListInput, createdAt: JSONQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, img: GraphCMS_AssetFilterInput, internal: InternalFilterInput, parent: NodeFilterInput, publishedAt: JSONQueryOperatorInput, remoteId: IDQueryOperatorInput, remoteTypeName: StringQueryOperatorInput, stage: GraphCMS_StageQueryOperatorInput, updatedAt: JSONQueryOperatorInput): GraphCMS_Image
    graphCmsImageCategory(children: NodeFilterListInput, createdAt: JSONQueryOperatorInput, id: StringQueryOperatorInput, image: GraphCMS_ImageFilterListInput, internal: InternalFilterInput, name: StringQueryOperatorInput, parent: NodeFilterInput, publishedAt: JSONQueryOperatorInput, remoteId: IDQueryOperatorInput, remoteTypeName: StringQueryOperatorInput, stage: GraphCMS_StageQueryOperatorInput, updatedAt: JSONQueryOperatorInput): GraphCMS_ImageCategory
    graphQlSource(children: NodeFilterListInput, fieldName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, typeName: StringQueryOperatorInput): GraphQLSource
    imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput, resolutions: ImageSharpResolutionsFilterInput, sizes: ImageSharpSizesFilterInput): ImageSharp
    site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput): Site
    siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
    sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, componentPath: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, matchPath: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
    sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
    turnipko: TURNIPKO!
}

type Site implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    host: String
    id: ID!
    internal: Internal!
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port: Int
    siteMetadata: SiteSiteMetadata
}

type SiteBuildMetadata implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type SiteBuildMetadataConnection {
    distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteBuildMetadataEdge {
    next: SiteBuildMetadata
    node: SiteBuildMetadata!
    previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
    edges: [SiteBuildMetadataEdge!]!
    field: String!
    fieldValue: String
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteConnection {
    distinct(field: SiteFieldsEnum!): [String!]!
    edges: [SiteEdge!]!
    group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteEdge {
    next: Site
    node: Site!
    previous: Site
}

type SiteGroupConnection {
    edges: [SiteEdge!]!
    field: String!
    fieldValue: String
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePage implements Node {
    children: [Node!]!
    component: String!
    componentChunkName: String!
    componentPath: String
    id: ID!
    internal: Internal!
    internalComponentName: String!
    isCreatedByStatefulCreatePages: Boolean
    matchPath: String
    parent: Node
    path: String!
    pluginCreator: SitePlugin
    pluginCreatorId: String
}

type SitePageConnection {
    distinct(field: SitePageFieldsEnum!): [String!]!
    edges: [SitePageEdge!]!
    group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePageEdge {
    next: SitePage
    node: SitePage!
    previous: SitePage
}

type SitePageGroupConnection {
    edges: [SitePageEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePlugin implements Node {
    browserAPIs: [String]
    children: [Node!]!
    id: ID!
    internal: Internal!
    name: String
    nodeAPIs: [String]
    packageJson: SitePluginPackageJson
    parent: Node
    pluginFilepath: String
    pluginOptions: SitePluginPluginOptions
    resolve: String
    ssrAPIs: [String]
    version: String
}

type SitePluginConnection {
    distinct(field: SitePluginFieldsEnum!): [String!]!
    edges: [SitePluginEdge!]!
    group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginEdge {
    next: SitePlugin
    node: SitePlugin!
    previous: SitePlugin
}

type SitePluginGroupConnection {
    edges: [SitePluginEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginPackageJson {
    dependencies: [SitePluginPackageJsonDependencies]
    description: String
    devDependencies: [SitePluginPackageJsonDevDependencies]
    keywords: [String]
    license: String
    main: String
    name: String
    peerDependencies: [SitePluginPackageJsonPeerDependencies]
    version: String
}

type SitePluginPackageJsonDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonDevDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonPeerDependencies {
    name: String
    version: String
}

type SitePluginPluginOptions {
    background_color: String
    cacheDigest: String
    cache_busting_mode: String
    display: String
    downloadLocalImages: Boolean
    endpoint: String
    fieldName: String
    icon: String
    include_favicon: Boolean
    legacy: Boolean
    name: String
    path: String
    pathCheck: Boolean
    short_name: String
    start_url: String
    theme_color: String
    theme_color_in_head: Boolean
    typeName: String
    url: String
}

type SiteSiteMetadata {
    author: String
    description: String
    title: String
}

type TURNIPKO {
    "Retrieve a single asset"
    asset(
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any
        other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_AssetWhereUniqueInput!
    ): TURNIPKO_Asset
    "Retrieve document version"
    assetVersion(where: TURNIPKO_VersionWhereInput!): TURNIPKO_DocumentVersion
    "Retrieve multiple assets"
    assets(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any
        other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        orderBy: TURNIPKO_AssetOrderByInput,
        skip: Int,
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_AssetWhereInput
    ): [TURNIPKO_Asset!]!
    "Retrieve multiple assets using the Relay connection interface"
    assetsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any
        other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        orderBy: TURNIPKO_AssetOrderByInput,
        skip: Int,
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_AssetWhereInput
    ): TURNIPKO_AssetConnection!
    "Retrieve a single image"
    image(
        """

        Defines which locales should be returned.

        Note that `Image` is a model without localized fields and will not be
        affected directly by this argument, however the locales will be passed on to
        any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_ImageWhereUniqueInput!
    ): TURNIPKO_Image
    "Retrieve multiple imageCategories"
    imageCategories(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ImageCategory` is a model without localized fields and will not
        be affected directly by this argument, however the locales will be passed on
        to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        orderBy: TURNIPKO_ImageCategoryOrderByInput,
        skip: Int,
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_ImageCategoryWhereInput
    ): [TURNIPKO_ImageCategory!]!
    "Retrieve multiple imageCategories using the Relay connection interface"
    imageCategoriesConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ImageCategory` is a model without localized fields and will not
        be affected directly by this argument, however the locales will be passed on
        to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        orderBy: TURNIPKO_ImageCategoryOrderByInput,
        skip: Int,
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_ImageCategoryWhereInput
    ): TURNIPKO_ImageCategoryConnection!
    "Retrieve a single imageCategory"
    imageCategory(
        """

        Defines which locales should be returned.

        Note that `ImageCategory` is a model without localized fields and will not
        be affected directly by this argument, however the locales will be passed on
        to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_ImageCategoryWhereUniqueInput!
    ): TURNIPKO_ImageCategory
    "Retrieve document version"
    imageCategoryVersion(where: TURNIPKO_VersionWhereInput!): TURNIPKO_DocumentVersion
    "Retrieve document version"
    imageVersion(where: TURNIPKO_VersionWhereInput!): TURNIPKO_DocumentVersion
    "Retrieve multiple images"
    images(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Image` is a model without localized fields and will not be
        affected directly by this argument, however the locales will be passed on to
        any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        orderBy: TURNIPKO_ImageOrderByInput,
        skip: Int,
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_ImageWhereInput
    ): [TURNIPKO_Image!]!
    "Retrieve multiple images using the Relay connection interface"
    imagesConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Image` is a model without localized fields and will not be
        affected directly by this argument, however the locales will be passed on to
        any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        orderBy: TURNIPKO_ImageOrderByInput,
        skip: Int,
        stage: TURNIPKO_Stage! = PUBLISHED,
        where: TURNIPKO_ImageWhereInput
    ): TURNIPKO_ImageConnection!
    "Fetches an object given its ID"
    node(
        "The ID of an object"
        id: ID!,
        """

        Defines which locales should be returned.

        Note that `Node` is a model without localized fields and will not be
        affected directly by this argument, however the locales will be passed on to
        any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a
        relational child field, this will effectively use the overwritten argument
        for the affected query's subtree.
        """
        locales: [TURNIPKO_Locale!]! = [en],
        stage: TURNIPKO_Stage! = PUBLISHED
    ): TURNIPKO_Node
}

type TURNIPKO_Aggregate {
    count: Int!
}

"Asset system model"
type TURNIPKO_Asset implements TURNIPKO_Node {
    "The time the document was created"
    createdAt(
        """

        Variation of DateTime field to return, allows value from base document,
        current localization, or combined by returning the newer value of both
        """
        variation: TURNIPKO_SystemDateTimeFieldVariation! = COMBINED
    ): TURNIPKO_DateTime!
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [TURNIPKO_Stage!]! = [PUBLISHED, DRAFT]
    ): [TURNIPKO_Asset!]!
    "The file name"
    fileName: String!
    "The file handle"
    handle: String!
    "The height of the file"
    height: Float
    "List of Asset versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: TURNIPKO_Stage
    ): [TURNIPKO_Version!]!
    "The unique identifier"
    id: ID!
    imageImg(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `imageImg` is a model without localized fields and will not be
        affected directly by this argument, however the locales will be passed on to
        any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [TURNIPKO_Locale!],
        orderBy: TURNIPKO_ImageOrderByInput,
        skip: Int,
        where: TURNIPKO_ImageWhereInput
    ): [TURNIPKO_Image!]!
    "System Locale field"
    locale: TURNIPKO_Locale!
    "Get the other localizations for this document"
    localizations(
        "Decides if the current locale should be included or not"
        includeCurrent: Boolean! = false,
        "Potential locales that should be returned"
        locales: [TURNIPKO_Locale!]! = [en]
    ): [TURNIPKO_Asset!]!
    "The mime type of the file"
    mimeType: String
    "The time the document was published. Null on documents in draft stage."
    publishedAt(
        """

        Variation of DateTime field to return, allows value from base document,
        current localization, or combined by returning the newer value of both
        """
        variation: TURNIPKO_SystemDateTimeFieldVariation! = COMBINED
    ): TURNIPKO_DateTime
    "The file size"
    size: Float
    "System stage field"
    stage: TURNIPKO_Stage!
    "The time the document was updated"
    updatedAt(
        """

        Variation of DateTime field to return, allows value from base document,
        current localization, or combined by returning the newer value of both
        """
        variation: TURNIPKO_SystemDateTimeFieldVariation! = COMBINED
    ): TURNIPKO_DateTime!
    "Get the url for the asset with provided transformations applied."
    url(transformation: TURNIPKO_AssetTransformationInput): String!
    "The file width"
    width: Float
}

"A connection to a list of items."
type TURNIPKO_AssetConnection {
    aggregate: TURNIPKO_Aggregate!
    "A list of edges."
    edges: [TURNIPKO_AssetEdge!]!
    "Information to aid in pagination."
    pageInfo: TURNIPKO_PageInfo!
}

"An edge in a connection."
type TURNIPKO_AssetEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: TURNIPKO_Asset!
}

type TURNIPKO_BatchPayload {
    "The number of nodes that have been affected by the Batch operation."
    count: TURNIPKO_Long!
}

"Representing a color value comprising of HEX, RGBA and css color values"
type TURNIPKO_Color {
    css: String!
    hex: TURNIPKO_Hex!
    rgba: TURNIPKO_RGBA!
}

type TURNIPKO_DocumentVersion {
    createdAt: TURNIPKO_DateTime!
    data: TURNIPKO_Json
    id: ID!
    revision: Int!
    stage: TURNIPKO_Stage!
}

type TURNIPKO_Image implements TURNIPKO_Node {
    category(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `category` is a model without localized fields and will not be
        affected directly by this argument, however the locales will be passed on to
        any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [TURNIPKO_Locale!]
    ): TURNIPKO_ImageCategory
    "The time the document was created"
    createdAt: TURNIPKO_DateTime!
    description: String!
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [TURNIPKO_Stage!]! = [PUBLISHED, DRAFT]
    ): [TURNIPKO_Image!]!
    "List of Image versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: TURNIPKO_Stage
    ): [TURNIPKO_Version!]!
    "The unique identifier"
    id: ID!
    img(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `img` is a model without localized fields and will not be affected
        directly by this argument, however the locales will be passed on to any
        relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [TURNIPKO_Locale!]
    ): TURNIPKO_Asset!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: TURNIPKO_DateTime
    "System stage field"
    stage: TURNIPKO_Stage!
    "The time the document was updated"
    updatedAt: TURNIPKO_DateTime!
}

type TURNIPKO_ImageCategory implements TURNIPKO_Node {
    "The time the document was created"
    createdAt: TURNIPKO_DateTime!
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [TURNIPKO_Stage!]! = [PUBLISHED, DRAFT]
    ): [TURNIPKO_ImageCategory!]!
    "List of ImageCategory versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: TURNIPKO_Stage
    ): [TURNIPKO_Version!]!
    "The unique identifier"
    id: ID!
    image(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `image` is a model without localized fields and will not be
        affected directly by this argument, however the locales will be passed on to
        any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first
        locale matching the provided list of locales will be returned, entries with
        non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [TURNIPKO_Locale!],
        orderBy: TURNIPKO_ImageOrderByInput,
        skip: Int,
        where: TURNIPKO_ImageWhereInput
    ): [TURNIPKO_Image!]!
    name: String!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: TURNIPKO_DateTime
    "System stage field"
    stage: TURNIPKO_Stage!
    "The time the document was updated"
    updatedAt: TURNIPKO_DateTime!
}

"A connection to a list of items."
type TURNIPKO_ImageCategoryConnection {
    aggregate: TURNIPKO_Aggregate!
    "A list of edges."
    edges: [TURNIPKO_ImageCategoryEdge!]!
    "Information to aid in pagination."
    pageInfo: TURNIPKO_PageInfo!
}

"An edge in a connection."
type TURNIPKO_ImageCategoryEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: TURNIPKO_ImageCategory!
}

"A connection to a list of items."
type TURNIPKO_ImageConnection {
    aggregate: TURNIPKO_Aggregate!
    "A list of edges."
    edges: [TURNIPKO_ImageEdge!]!
    "Information to aid in pagination."
    pageInfo: TURNIPKO_PageInfo!
}

"An edge in a connection."
type TURNIPKO_ImageEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: TURNIPKO_Image!
}

"Representing a geolocation point with latitude and longitude"
type TURNIPKO_Location {
    distance(from: TURNIPKO_LocationInput!): Float!
    latitude: Float!
    longitude: Float!
}

"Information about pagination in a connection."
type TURNIPKO_PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "Number of items in the current page."
    pageSize: Int
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()"
type TURNIPKO_RGBA {
    a: TURNIPKO_RGBATransparency!
    b: TURNIPKO_RGBAHue!
    g: TURNIPKO_RGBAHue!
    r: TURNIPKO_RGBAHue!
}

"Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values"
type TURNIPKO_RichText {
    "Returns HTMl representation"
    html: String!
    "Returns Markdown representation"
    markdown: String!
    "Returns AST representation"
    raw: TURNIPKO_RichTextAST!
    "Returns plain-text contents of RichText"
    text: String!
}

type TURNIPKO_Version {
    createdAt: TURNIPKO_DateTime!
    id: ID!
    revision: Int!
    stage: TURNIPKO_Stage!
}

enum DirectoryFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum FileFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    childImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    publicURL
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
    url
}

enum GraphCMS_AssetFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    createdAt
    fileName
    handle
    height
    id
    imageImg
    imageImg___category___children
    imageImg___category___children___children
    imageImg___category___children___id
    imageImg___category___createdAt
    imageImg___category___id
    imageImg___category___image
    imageImg___category___image___children
    imageImg___category___image___createdAt
    imageImg___category___image___description
    imageImg___category___image___id
    imageImg___category___image___publishedAt
    imageImg___category___image___remoteId
    imageImg___category___image___remoteTypeName
    imageImg___category___image___stage
    imageImg___category___image___updatedAt
    imageImg___category___internal___content
    imageImg___category___internal___contentDigest
    imageImg___category___internal___description
    imageImg___category___internal___fieldOwners
    imageImg___category___internal___ignoreType
    imageImg___category___internal___mediaType
    imageImg___category___internal___owner
    imageImg___category___internal___type
    imageImg___category___name
    imageImg___category___parent___children
    imageImg___category___parent___id
    imageImg___category___publishedAt
    imageImg___category___remoteId
    imageImg___category___remoteTypeName
    imageImg___category___stage
    imageImg___category___updatedAt
    imageImg___children
    imageImg___children___children
    imageImg___children___children___children
    imageImg___children___children___id
    imageImg___children___id
    imageImg___children___internal___content
    imageImg___children___internal___contentDigest
    imageImg___children___internal___description
    imageImg___children___internal___fieldOwners
    imageImg___children___internal___ignoreType
    imageImg___children___internal___mediaType
    imageImg___children___internal___owner
    imageImg___children___internal___type
    imageImg___children___parent___children
    imageImg___children___parent___id
    imageImg___createdAt
    imageImg___description
    imageImg___id
    imageImg___img___children
    imageImg___img___children___children
    imageImg___img___children___id
    imageImg___img___createdAt
    imageImg___img___fileName
    imageImg___img___handle
    imageImg___img___height
    imageImg___img___id
    imageImg___img___imageImg
    imageImg___img___imageImg___children
    imageImg___img___imageImg___createdAt
    imageImg___img___imageImg___description
    imageImg___img___imageImg___id
    imageImg___img___imageImg___publishedAt
    imageImg___img___imageImg___remoteId
    imageImg___img___imageImg___remoteTypeName
    imageImg___img___imageImg___stage
    imageImg___img___imageImg___updatedAt
    imageImg___img___internal___content
    imageImg___img___internal___contentDigest
    imageImg___img___internal___description
    imageImg___img___internal___fieldOwners
    imageImg___img___internal___ignoreType
    imageImg___img___internal___mediaType
    imageImg___img___internal___owner
    imageImg___img___internal___type
    imageImg___img___localFile___absolutePath
    imageImg___img___localFile___accessTime
    imageImg___img___localFile___atime
    imageImg___img___localFile___atimeMs
    imageImg___img___localFile___base
    imageImg___img___localFile___birthTime
    imageImg___img___localFile___birthtime
    imageImg___img___localFile___birthtimeMs
    imageImg___img___localFile___blksize
    imageImg___img___localFile___blocks
    imageImg___img___localFile___changeTime
    imageImg___img___localFile___children
    imageImg___img___localFile___ctime
    imageImg___img___localFile___ctimeMs
    imageImg___img___localFile___dev
    imageImg___img___localFile___dir
    imageImg___img___localFile___ext
    imageImg___img___localFile___extension
    imageImg___img___localFile___gid
    imageImg___img___localFile___id
    imageImg___img___localFile___ino
    imageImg___img___localFile___mode
    imageImg___img___localFile___modifiedTime
    imageImg___img___localFile___mtime
    imageImg___img___localFile___mtimeMs
    imageImg___img___localFile___name
    imageImg___img___localFile___nlink
    imageImg___img___localFile___prettySize
    imageImg___img___localFile___publicURL
    imageImg___img___localFile___rdev
    imageImg___img___localFile___relativeDirectory
    imageImg___img___localFile___relativePath
    imageImg___img___localFile___root
    imageImg___img___localFile___size
    imageImg___img___localFile___sourceInstanceName
    imageImg___img___localFile___uid
    imageImg___img___localFile___url
    imageImg___img___locale
    imageImg___img___mimeType
    imageImg___img___parent___children
    imageImg___img___parent___id
    imageImg___img___publishedAt
    imageImg___img___remoteId
    imageImg___img___remoteTypeName
    imageImg___img___size
    imageImg___img___stage
    imageImg___img___updatedAt
    imageImg___img___url
    imageImg___img___width
    imageImg___internal___content
    imageImg___internal___contentDigest
    imageImg___internal___description
    imageImg___internal___fieldOwners
    imageImg___internal___ignoreType
    imageImg___internal___mediaType
    imageImg___internal___owner
    imageImg___internal___type
    imageImg___parent___children
    imageImg___parent___children___children
    imageImg___parent___children___id
    imageImg___parent___id
    imageImg___parent___internal___content
    imageImg___parent___internal___contentDigest
    imageImg___parent___internal___description
    imageImg___parent___internal___fieldOwners
    imageImg___parent___internal___ignoreType
    imageImg___parent___internal___mediaType
    imageImg___parent___internal___owner
    imageImg___parent___internal___type
    imageImg___parent___parent___children
    imageImg___parent___parent___id
    imageImg___publishedAt
    imageImg___remoteId
    imageImg___remoteTypeName
    imageImg___stage
    imageImg___updatedAt
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    localFile___absolutePath
    localFile___accessTime
    localFile___atime
    localFile___atimeMs
    localFile___base
    localFile___birthTime
    localFile___birthtime
    localFile___birthtimeMs
    localFile___blksize
    localFile___blocks
    localFile___changeTime
    localFile___childImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___resolutions___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___childImageSharp___sizes___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    localFile___children
    localFile___children___children
    localFile___children___children___children
    localFile___children___children___id
    localFile___children___id
    localFile___children___internal___content
    localFile___children___internal___contentDigest
    localFile___children___internal___description
    localFile___children___internal___fieldOwners
    localFile___children___internal___ignoreType
    localFile___children___internal___mediaType
    localFile___children___internal___owner
    localFile___children___internal___type
    localFile___children___parent___children
    localFile___children___parent___id
    localFile___ctime
    localFile___ctimeMs
    localFile___dev
    localFile___dir
    localFile___ext
    localFile___extension
    localFile___gid
    localFile___id
    localFile___ino
    localFile___internal___content
    localFile___internal___contentDigest
    localFile___internal___description
    localFile___internal___fieldOwners
    localFile___internal___ignoreType
    localFile___internal___mediaType
    localFile___internal___owner
    localFile___internal___type
    localFile___mode
    localFile___modifiedTime
    localFile___mtime
    localFile___mtimeMs
    localFile___name
    localFile___nlink
    localFile___parent___children
    localFile___parent___children___children
    localFile___parent___children___id
    localFile___parent___id
    localFile___parent___internal___content
    localFile___parent___internal___contentDigest
    localFile___parent___internal___description
    localFile___parent___internal___fieldOwners
    localFile___parent___internal___ignoreType
    localFile___parent___internal___mediaType
    localFile___parent___internal___owner
    localFile___parent___internal___type
    localFile___parent___parent___children
    localFile___parent___parent___id
    localFile___prettySize
    localFile___publicURL
    localFile___rdev
    localFile___relativeDirectory
    localFile___relativePath
    localFile___root
    localFile___size
    localFile___sourceInstanceName
    localFile___uid
    localFile___url
    locale
    mimeType
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    publishedAt
    remoteId
    remoteTypeName
    size
    stage
    updatedAt
    url
    width
}

enum GraphCMS_ImageCategoryFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    createdAt
    id
    image
    image___category___children
    image___category___children___children
    image___category___children___id
    image___category___createdAt
    image___category___id
    image___category___image
    image___category___image___children
    image___category___image___createdAt
    image___category___image___description
    image___category___image___id
    image___category___image___publishedAt
    image___category___image___remoteId
    image___category___image___remoteTypeName
    image___category___image___stage
    image___category___image___updatedAt
    image___category___internal___content
    image___category___internal___contentDigest
    image___category___internal___description
    image___category___internal___fieldOwners
    image___category___internal___ignoreType
    image___category___internal___mediaType
    image___category___internal___owner
    image___category___internal___type
    image___category___name
    image___category___parent___children
    image___category___parent___id
    image___category___publishedAt
    image___category___remoteId
    image___category___remoteTypeName
    image___category___stage
    image___category___updatedAt
    image___children
    image___children___children
    image___children___children___children
    image___children___children___id
    image___children___id
    image___children___internal___content
    image___children___internal___contentDigest
    image___children___internal___description
    image___children___internal___fieldOwners
    image___children___internal___ignoreType
    image___children___internal___mediaType
    image___children___internal___owner
    image___children___internal___type
    image___children___parent___children
    image___children___parent___id
    image___createdAt
    image___description
    image___id
    image___img___children
    image___img___children___children
    image___img___children___id
    image___img___createdAt
    image___img___fileName
    image___img___handle
    image___img___height
    image___img___id
    image___img___imageImg
    image___img___imageImg___children
    image___img___imageImg___createdAt
    image___img___imageImg___description
    image___img___imageImg___id
    image___img___imageImg___publishedAt
    image___img___imageImg___remoteId
    image___img___imageImg___remoteTypeName
    image___img___imageImg___stage
    image___img___imageImg___updatedAt
    image___img___internal___content
    image___img___internal___contentDigest
    image___img___internal___description
    image___img___internal___fieldOwners
    image___img___internal___ignoreType
    image___img___internal___mediaType
    image___img___internal___owner
    image___img___internal___type
    image___img___localFile___absolutePath
    image___img___localFile___accessTime
    image___img___localFile___atime
    image___img___localFile___atimeMs
    image___img___localFile___base
    image___img___localFile___birthTime
    image___img___localFile___birthtime
    image___img___localFile___birthtimeMs
    image___img___localFile___blksize
    image___img___localFile___blocks
    image___img___localFile___changeTime
    image___img___localFile___children
    image___img___localFile___ctime
    image___img___localFile___ctimeMs
    image___img___localFile___dev
    image___img___localFile___dir
    image___img___localFile___ext
    image___img___localFile___extension
    image___img___localFile___gid
    image___img___localFile___id
    image___img___localFile___ino
    image___img___localFile___mode
    image___img___localFile___modifiedTime
    image___img___localFile___mtime
    image___img___localFile___mtimeMs
    image___img___localFile___name
    image___img___localFile___nlink
    image___img___localFile___prettySize
    image___img___localFile___publicURL
    image___img___localFile___rdev
    image___img___localFile___relativeDirectory
    image___img___localFile___relativePath
    image___img___localFile___root
    image___img___localFile___size
    image___img___localFile___sourceInstanceName
    image___img___localFile___uid
    image___img___localFile___url
    image___img___locale
    image___img___mimeType
    image___img___parent___children
    image___img___parent___id
    image___img___publishedAt
    image___img___remoteId
    image___img___remoteTypeName
    image___img___size
    image___img___stage
    image___img___updatedAt
    image___img___url
    image___img___width
    image___internal___content
    image___internal___contentDigest
    image___internal___description
    image___internal___fieldOwners
    image___internal___ignoreType
    image___internal___mediaType
    image___internal___owner
    image___internal___type
    image___parent___children
    image___parent___children___children
    image___parent___children___id
    image___parent___id
    image___parent___internal___content
    image___parent___internal___contentDigest
    image___parent___internal___description
    image___parent___internal___fieldOwners
    image___parent___internal___ignoreType
    image___parent___internal___mediaType
    image___parent___internal___owner
    image___parent___internal___type
    image___parent___parent___children
    image___parent___parent___id
    image___publishedAt
    image___remoteId
    image___remoteTypeName
    image___stage
    image___updatedAt
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    name
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    publishedAt
    remoteId
    remoteTypeName
    stage
    updatedAt
}

enum GraphCMS_ImageFieldsEnum {
    category___children
    category___children___children
    category___children___children___children
    category___children___children___id
    category___children___id
    category___children___internal___content
    category___children___internal___contentDigest
    category___children___internal___description
    category___children___internal___fieldOwners
    category___children___internal___ignoreType
    category___children___internal___mediaType
    category___children___internal___owner
    category___children___internal___type
    category___children___parent___children
    category___children___parent___id
    category___createdAt
    category___id
    category___image
    category___image___category___children
    category___image___category___createdAt
    category___image___category___id
    category___image___category___image
    category___image___category___name
    category___image___category___publishedAt
    category___image___category___remoteId
    category___image___category___remoteTypeName
    category___image___category___stage
    category___image___category___updatedAt
    category___image___children
    category___image___children___children
    category___image___children___id
    category___image___createdAt
    category___image___description
    category___image___id
    category___image___img___children
    category___image___img___createdAt
    category___image___img___fileName
    category___image___img___handle
    category___image___img___height
    category___image___img___id
    category___image___img___imageImg
    category___image___img___locale
    category___image___img___mimeType
    category___image___img___publishedAt
    category___image___img___remoteId
    category___image___img___remoteTypeName
    category___image___img___size
    category___image___img___stage
    category___image___img___updatedAt
    category___image___img___url
    category___image___img___width
    category___image___internal___content
    category___image___internal___contentDigest
    category___image___internal___description
    category___image___internal___fieldOwners
    category___image___internal___ignoreType
    category___image___internal___mediaType
    category___image___internal___owner
    category___image___internal___type
    category___image___parent___children
    category___image___parent___id
    category___image___publishedAt
    category___image___remoteId
    category___image___remoteTypeName
    category___image___stage
    category___image___updatedAt
    category___internal___content
    category___internal___contentDigest
    category___internal___description
    category___internal___fieldOwners
    category___internal___ignoreType
    category___internal___mediaType
    category___internal___owner
    category___internal___type
    category___name
    category___parent___children
    category___parent___children___children
    category___parent___children___id
    category___parent___id
    category___parent___internal___content
    category___parent___internal___contentDigest
    category___parent___internal___description
    category___parent___internal___fieldOwners
    category___parent___internal___ignoreType
    category___parent___internal___mediaType
    category___parent___internal___owner
    category___parent___internal___type
    category___parent___parent___children
    category___parent___parent___id
    category___publishedAt
    category___remoteId
    category___remoteTypeName
    category___stage
    category___updatedAt
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    createdAt
    description
    id
    img___children
    img___children___children
    img___children___children___children
    img___children___children___id
    img___children___id
    img___children___internal___content
    img___children___internal___contentDigest
    img___children___internal___description
    img___children___internal___fieldOwners
    img___children___internal___ignoreType
    img___children___internal___mediaType
    img___children___internal___owner
    img___children___internal___type
    img___children___parent___children
    img___children___parent___id
    img___createdAt
    img___fileName
    img___handle
    img___height
    img___id
    img___imageImg
    img___imageImg___category___children
    img___imageImg___category___createdAt
    img___imageImg___category___id
    img___imageImg___category___image
    img___imageImg___category___name
    img___imageImg___category___publishedAt
    img___imageImg___category___remoteId
    img___imageImg___category___remoteTypeName
    img___imageImg___category___stage
    img___imageImg___category___updatedAt
    img___imageImg___children
    img___imageImg___children___children
    img___imageImg___children___id
    img___imageImg___createdAt
    img___imageImg___description
    img___imageImg___id
    img___imageImg___img___children
    img___imageImg___img___createdAt
    img___imageImg___img___fileName
    img___imageImg___img___handle
    img___imageImg___img___height
    img___imageImg___img___id
    img___imageImg___img___imageImg
    img___imageImg___img___locale
    img___imageImg___img___mimeType
    img___imageImg___img___publishedAt
    img___imageImg___img___remoteId
    img___imageImg___img___remoteTypeName
    img___imageImg___img___size
    img___imageImg___img___stage
    img___imageImg___img___updatedAt
    img___imageImg___img___url
    img___imageImg___img___width
    img___imageImg___internal___content
    img___imageImg___internal___contentDigest
    img___imageImg___internal___description
    img___imageImg___internal___fieldOwners
    img___imageImg___internal___ignoreType
    img___imageImg___internal___mediaType
    img___imageImg___internal___owner
    img___imageImg___internal___type
    img___imageImg___parent___children
    img___imageImg___parent___id
    img___imageImg___publishedAt
    img___imageImg___remoteId
    img___imageImg___remoteTypeName
    img___imageImg___stage
    img___imageImg___updatedAt
    img___internal___content
    img___internal___contentDigest
    img___internal___description
    img___internal___fieldOwners
    img___internal___ignoreType
    img___internal___mediaType
    img___internal___owner
    img___internal___type
    img___localFile___absolutePath
    img___localFile___accessTime
    img___localFile___atime
    img___localFile___atimeMs
    img___localFile___base
    img___localFile___birthTime
    img___localFile___birthtime
    img___localFile___birthtimeMs
    img___localFile___blksize
    img___localFile___blocks
    img___localFile___changeTime
    img___localFile___childImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    img___localFile___childImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    img___localFile___children
    img___localFile___children___children
    img___localFile___children___id
    img___localFile___ctime
    img___localFile___ctimeMs
    img___localFile___dev
    img___localFile___dir
    img___localFile___ext
    img___localFile___extension
    img___localFile___gid
    img___localFile___id
    img___localFile___ino
    img___localFile___internal___content
    img___localFile___internal___contentDigest
    img___localFile___internal___description
    img___localFile___internal___fieldOwners
    img___localFile___internal___ignoreType
    img___localFile___internal___mediaType
    img___localFile___internal___owner
    img___localFile___internal___type
    img___localFile___mode
    img___localFile___modifiedTime
    img___localFile___mtime
    img___localFile___mtimeMs
    img___localFile___name
    img___localFile___nlink
    img___localFile___parent___children
    img___localFile___parent___id
    img___localFile___prettySize
    img___localFile___publicURL
    img___localFile___rdev
    img___localFile___relativeDirectory
    img___localFile___relativePath
    img___localFile___root
    img___localFile___size
    img___localFile___sourceInstanceName
    img___localFile___uid
    img___localFile___url
    img___locale
    img___mimeType
    img___parent___children
    img___parent___children___children
    img___parent___children___id
    img___parent___id
    img___parent___internal___content
    img___parent___internal___contentDigest
    img___parent___internal___description
    img___parent___internal___fieldOwners
    img___parent___internal___ignoreType
    img___parent___internal___mediaType
    img___parent___internal___owner
    img___parent___internal___type
    img___parent___parent___children
    img___parent___parent___id
    img___publishedAt
    img___remoteId
    img___remoteTypeName
    img___size
    img___stage
    img___updatedAt
    img___url
    img___width
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    publishedAt
    remoteId
    remoteTypeName
    stage
    updatedAt
}

enum GraphCMS_Locale {
    en
}

enum GraphCMS_Stage {
    DRAFT
    PUBLISHED
}

enum GraphQLSourceFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    fieldName
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    typeName
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFit {
    CONTAIN
    COVER
    FILL
    INSIDE
    OUTSIDE
}

enum ImageFormat {
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageSharpFieldsEnum {
    children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum SiteBuildMetadataFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
}

enum SiteFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    host
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pathPrefix
    polyfill
    port
    siteMetadata___author
    siteMetadata___description
    siteMetadata___title
}

enum SitePageFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    component
    componentChunkName
    componentPath
    id
    internalComponentName
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    isCreatedByStatefulCreatePages
    matchPath
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    path
    pluginCreatorId
    pluginCreator___browserAPIs
    pluginCreator___children
    pluginCreator___children___children
    pluginCreator___children___children___children
    pluginCreator___children___children___id
    pluginCreator___children___id
    pluginCreator___children___internal___content
    pluginCreator___children___internal___contentDigest
    pluginCreator___children___internal___description
    pluginCreator___children___internal___fieldOwners
    pluginCreator___children___internal___ignoreType
    pluginCreator___children___internal___mediaType
    pluginCreator___children___internal___owner
    pluginCreator___children___internal___type
    pluginCreator___children___parent___children
    pluginCreator___children___parent___id
    pluginCreator___id
    pluginCreator___internal___content
    pluginCreator___internal___contentDigest
    pluginCreator___internal___description
    pluginCreator___internal___fieldOwners
    pluginCreator___internal___ignoreType
    pluginCreator___internal___mediaType
    pluginCreator___internal___owner
    pluginCreator___internal___type
    pluginCreator___name
    pluginCreator___nodeAPIs
    pluginCreator___packageJson___dependencies
    pluginCreator___packageJson___dependencies___name
    pluginCreator___packageJson___dependencies___version
    pluginCreator___packageJson___description
    pluginCreator___packageJson___devDependencies
    pluginCreator___packageJson___devDependencies___name
    pluginCreator___packageJson___devDependencies___version
    pluginCreator___packageJson___keywords
    pluginCreator___packageJson___license
    pluginCreator___packageJson___main
    pluginCreator___packageJson___name
    pluginCreator___packageJson___peerDependencies
    pluginCreator___packageJson___peerDependencies___name
    pluginCreator___packageJson___peerDependencies___version
    pluginCreator___packageJson___version
    pluginCreator___parent___children
    pluginCreator___parent___children___children
    pluginCreator___parent___children___id
    pluginCreator___parent___id
    pluginCreator___parent___internal___content
    pluginCreator___parent___internal___contentDigest
    pluginCreator___parent___internal___description
    pluginCreator___parent___internal___fieldOwners
    pluginCreator___parent___internal___ignoreType
    pluginCreator___parent___internal___mediaType
    pluginCreator___parent___internal___owner
    pluginCreator___parent___internal___type
    pluginCreator___parent___parent___children
    pluginCreator___parent___parent___id
    pluginCreator___pluginFilepath
    pluginCreator___pluginOptions___background_color
    pluginCreator___pluginOptions___cacheDigest
    pluginCreator___pluginOptions___cache_busting_mode
    pluginCreator___pluginOptions___display
    pluginCreator___pluginOptions___downloadLocalImages
    pluginCreator___pluginOptions___endpoint
    pluginCreator___pluginOptions___fieldName
    pluginCreator___pluginOptions___icon
    pluginCreator___pluginOptions___include_favicon
    pluginCreator___pluginOptions___legacy
    pluginCreator___pluginOptions___name
    pluginCreator___pluginOptions___path
    pluginCreator___pluginOptions___pathCheck
    pluginCreator___pluginOptions___short_name
    pluginCreator___pluginOptions___start_url
    pluginCreator___pluginOptions___theme_color
    pluginCreator___pluginOptions___theme_color_in_head
    pluginCreator___pluginOptions___typeName
    pluginCreator___pluginOptions___url
    pluginCreator___resolve
    pluginCreator___ssrAPIs
    pluginCreator___version
}

enum SitePluginFieldsEnum {
    browserAPIs
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___dependencies
    packageJson___dependencies___name
    packageJson___dependencies___version
    packageJson___description
    packageJson___devDependencies
    packageJson___devDependencies___name
    packageJson___devDependencies___version
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___peerDependencies___name
    packageJson___peerDependencies___version
    packageJson___version
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginFilepath
    pluginOptions___background_color
    pluginOptions___cacheDigest
    pluginOptions___cache_busting_mode
    pluginOptions___display
    pluginOptions___downloadLocalImages
    pluginOptions___endpoint
    pluginOptions___fieldName
    pluginOptions___icon
    pluginOptions___include_favicon
    pluginOptions___legacy
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___short_name
    pluginOptions___start_url
    pluginOptions___theme_color
    pluginOptions___theme_color_in_head
    pluginOptions___typeName
    pluginOptions___url
    resolve
    ssrAPIs
    version
}

enum SortOrderEnum {
    ASC
    DESC
}

enum TURNIPKO_AssetOrderByInput {
    createdAt_ASC
    createdAt_DESC
    fileName_ASC
    fileName_DESC
    handle_ASC
    handle_DESC
    height_ASC
    height_DESC
    id_ASC
    id_DESC
    mimeType_ASC
    mimeType_DESC
    publishedAt_ASC
    publishedAt_DESC
    size_ASC
    size_DESC
    updatedAt_ASC
    updatedAt_DESC
    width_ASC
    width_DESC
}

enum TURNIPKO_DocumentFileTypes {
    doc
    docx
    html
    jpg
    odp
    ods
    odt
    pdf
    png
    ppt
    pptx
    svg
    txt
    webp
    xls
    xlsx
}

enum TURNIPKO_ImageCategoryOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum TURNIPKO_ImageFit {
    "Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio."
    clip
    """

    Resizes the image to fit the specified parameters exactly by removing any
    parts of the image that don't fit within the boundaries.
    """
    crop
    """

    Resizes the image to fit within the parameters, but as opposed to 'fit:clip'
    will not scale the image if the image is smaller than the output size.
    """
    max
    """

    Resizes the image to fit the specified parameters exactly by scaling the image
    to the desired size. The aspect ratio of the image is not respected and the
    image can be distorted using this method.
    """
    scale
}

enum TURNIPKO_ImageOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"Locale system enumeration"
enum TURNIPKO_Locale {
    "System locale"
    en
}

"Stage system enumeration"
enum TURNIPKO_Stage {
    "The Draft is the default stage for all your content."
    DRAFT
    "The Published stage is where you can publish your content to."
    PUBLISHED
}

enum TURNIPKO_SystemDateTimeFieldVariation {
    BASE
    COMBINED
    LOCALIZATION
}

enum TURNIPKO__FilterKind {
    AND
    NOT
    OR
    contains
    contains_all
    contains_none
    contains_some
    ends_with
    eq
    eq_not
    gt
    gte
    in
    lt
    lte
    not_contains
    not_ends_with
    not_in
    not_starts_with
    relational_every
    relational_none
    relational_single
    relational_some
    search
    starts_with
}

enum TURNIPKO__MutationInputFieldKind {
    enum
    relation
    richText
    scalar
    union
    virtual
}

enum TURNIPKO__MutationKind {
    create
    delete
    deleteMany
    publish
    publishMany
    unpublish
    unpublishMany
    update
    updateMany
    upsert
}

enum TURNIPKO__OrderDirection {
    asc
    desc
}

enum TURNIPKO__RelationInputCardinality {
    many
    one
}

enum TURNIPKO__RelationInputKind {
    create
    update
}

enum TURNIPKO__RelationKind {
    regular
    union
}

enum TURNIPKO__SystemDateTimeFieldVariation {
    base
    combined
    localization
}

input BooleanQueryOperatorInput {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input DateQueryOperatorInput {
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    nin: [Date]
}

input DirectoryFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input DirectorySortInput {
    fields: [DirectoryFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
    highlight: String!
    opacity: Int
    shadow: String!
}

input FileFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    childImageSharp: ImageSharpFilterInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    publicURL: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
    url: StringQueryOperatorInput
}

input FileSortInput {
    fields: [FileFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input GraphCMS_AssetFilterInput {
    children: NodeFilterListInput
    createdAt: JSONQueryOperatorInput
    fileName: StringQueryOperatorInput
    handle: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    id: StringQueryOperatorInput
    imageImg: GraphCMS_ImageFilterListInput
    internal: InternalFilterInput
    localFile: FileFilterInput
    locale: GraphCMS_LocaleQueryOperatorInput
    mimeType: StringQueryOperatorInput
    parent: NodeFilterInput
    publishedAt: JSONQueryOperatorInput
    remoteId: IDQueryOperatorInput
    remoteTypeName: StringQueryOperatorInput
    size: FloatQueryOperatorInput
    stage: GraphCMS_StageQueryOperatorInput
    updatedAt: JSONQueryOperatorInput
    url: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input GraphCMS_AssetSortInput {
    fields: [GraphCMS_AssetFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input GraphCMS_ImageCategoryFilterInput {
    children: NodeFilterListInput
    createdAt: JSONQueryOperatorInput
    id: StringQueryOperatorInput
    image: GraphCMS_ImageFilterListInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    parent: NodeFilterInput
    publishedAt: JSONQueryOperatorInput
    remoteId: IDQueryOperatorInput
    remoteTypeName: StringQueryOperatorInput
    stage: GraphCMS_StageQueryOperatorInput
    updatedAt: JSONQueryOperatorInput
}

input GraphCMS_ImageCategorySortInput {
    fields: [GraphCMS_ImageCategoryFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input GraphCMS_ImageFilterInput {
    category: GraphCMS_ImageCategoryFilterInput
    children: NodeFilterListInput
    createdAt: JSONQueryOperatorInput
    description: StringQueryOperatorInput
    id: StringQueryOperatorInput
    img: GraphCMS_AssetFilterInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    publishedAt: JSONQueryOperatorInput
    remoteId: IDQueryOperatorInput
    remoteTypeName: StringQueryOperatorInput
    stage: GraphCMS_StageQueryOperatorInput
    updatedAt: JSONQueryOperatorInput
}

input GraphCMS_ImageFilterListInput {
    elemMatch: GraphCMS_ImageFilterInput
}

input GraphCMS_ImageSortInput {
    fields: [GraphCMS_ImageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input GraphCMS_LocaleQueryOperatorInput {
    eq: GraphCMS_Locale
    in: [GraphCMS_Locale]
    ne: GraphCMS_Locale
    nin: [GraphCMS_Locale]
}

input GraphCMS_StageQueryOperatorInput {
    eq: GraphCMS_Stage
    in: [GraphCMS_Stage]
    ne: GraphCMS_Stage
    nin: [GraphCMS_Stage]
}

input GraphQLSourceFilterInput {
    children: NodeFilterListInput
    fieldName: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    typeName: StringQueryOperatorInput
}

input GraphQLSourceSortInput {
    fields: [GraphQLSourceFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input IDQueryOperatorInput {
    eq: ID
    in: [ID]
    ne: ID
    nin: [ID]
}

input ImageSharpFilterInput {
    children: NodeFilterListInput
    fixed: ImageSharpFixedFilterInput
    fluid: ImageSharpFluidFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    original: ImageSharpOriginalFilterInput
    parent: NodeFilterInput
    resize: ImageSharpResizeFilterInput
    resolutions: ImageSharpResolutionsFilterInput
    sizes: ImageSharpSizesFilterInput
}

input ImageSharpFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpOriginalFilterInput {
    height: FloatQueryOperatorInput
    src: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpResizeFilterInput {
    aspectRatio: FloatQueryOperatorInput
    height: IntQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImageSharpResolutionsFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpSizesFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpSortInput {
    fields: [ImageSharpFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input IntQueryOperatorInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input InternalFilterInput {
    content: StringQueryOperatorInput
    contentDigest: StringQueryOperatorInput
    description: StringQueryOperatorInput
    fieldOwners: StringQueryOperatorInput
    ignoreType: BooleanQueryOperatorInput
    mediaType: StringQueryOperatorInput
    owner: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input JSONQueryOperatorInput {
    eq: JSON
    glob: JSON
    in: [JSON]
    ne: JSON
    nin: [JSON]
    regex: JSON
}

input NodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input NodeFilterListInput {
    elemMatch: NodeFilterInput
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input SiteBuildMetadataFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
    fields: [SiteBuildMetadataFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    host: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    pathPrefix: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    port: IntQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
}

input SitePageFilterInput {
    children: NodeFilterListInput
    component: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    componentPath: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalComponentName: StringQueryOperatorInput
    isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
    matchPath: StringQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    pluginCreator: SitePluginFilterInput
    pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
    fields: [SitePageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
    browserAPIs: StringQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    nodeAPIs: StringQueryOperatorInput
    packageJson: SitePluginPackageJsonFilterInput
    parent: NodeFilterInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: SitePluginPluginOptionsFilterInput
    resolve: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
    dependencies: SitePluginPackageJsonDependenciesFilterListInput
    description: StringQueryOperatorInput
    devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
    keywords: StringQueryOperatorInput
    license: StringQueryOperatorInput
    main: StringQueryOperatorInput
    name: StringQueryOperatorInput
    peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPluginOptionsFilterInput {
    background_color: StringQueryOperatorInput
    cacheDigest: StringQueryOperatorInput
    cache_busting_mode: StringQueryOperatorInput
    display: StringQueryOperatorInput
    downloadLocalImages: BooleanQueryOperatorInput
    endpoint: StringQueryOperatorInput
    fieldName: StringQueryOperatorInput
    icon: StringQueryOperatorInput
    include_favicon: BooleanQueryOperatorInput
    legacy: BooleanQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
    pathCheck: BooleanQueryOperatorInput
    short_name: StringQueryOperatorInput
    start_url: StringQueryOperatorInput
    theme_color: StringQueryOperatorInput
    theme_color_in_head: BooleanQueryOperatorInput
    typeName: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input SitePluginSortInput {
    fields: [SitePluginFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
    author: StringQueryOperatorInput
    description: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input SiteSortInput {
    fields: [SiteFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input TURNIPKO_AssetConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: TURNIPKO_ConnectPositionInput
    "Document to connect"
    where: TURNIPKO_AssetWhereUniqueInput!
}

input TURNIPKO_AssetCreateInput {
    createdAt: TURNIPKO_DateTime
    fileName: String!
    handle: String!
    height: Float
    imageImg: TURNIPKO_ImageCreateManyInlineInput
    "Inline mutations for managing document localizations excluding the default locale"
    localizations: TURNIPKO_AssetCreateLocalizationsInput
    mimeType: String
    size: Float
    updatedAt: TURNIPKO_DateTime
    width: Float
}

input TURNIPKO_AssetCreateLocalizationDataInput {
    createdAt: TURNIPKO_DateTime
    fileName: String!
    handle: String!
    height: Float
    mimeType: String
    size: Float
    updatedAt: TURNIPKO_DateTime
    width: Float
}

input TURNIPKO_AssetCreateLocalizationInput {
    "Localization input"
    data: TURNIPKO_AssetCreateLocalizationDataInput!
    locale: TURNIPKO_Locale!
}

input TURNIPKO_AssetCreateLocalizationsInput {
    "Create localizations for the newly-created document"
    create: [TURNIPKO_AssetCreateLocalizationInput!]
}

input TURNIPKO_AssetCreateManyInlineInput {
    "Connect multiple existing Asset documents"
    connect: [TURNIPKO_AssetWhereUniqueInput!]
    "Create and connect multiple existing Asset documents"
    create: [TURNIPKO_AssetCreateInput!]
}

input TURNIPKO_AssetCreateOneInlineInput {
    "Connect one existing Asset document"
    connect: TURNIPKO_AssetWhereUniqueInput
    "Create and connect one Asset document"
    create: TURNIPKO_AssetCreateInput
}

"Identifies documents"
input TURNIPKO_AssetManyWhereInput {
    "Logical AND on all given filters."
    AND: [TURNIPKO_AssetWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [TURNIPKO_AssetWhereInput!]
    "Logical OR on all given filters."
    OR: [TURNIPKO_AssetWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: TURNIPKO_DateTime
    "All values greater than the given value."
    createdAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    createdAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    createdAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    createdAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    createdAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [TURNIPKO_DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    imageImg_every: TURNIPKO_ImageWhereInput
    imageImg_none: TURNIPKO_ImageWhereInput
    imageImg_some: TURNIPKO_ImageWhereInput
    publishedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    publishedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    publishedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    publishedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    publishedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [TURNIPKO_DateTime!]
    updatedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    updatedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    updatedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    updatedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    updatedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [TURNIPKO_DateTime!]
}

"Transformations for Assets"
input TURNIPKO_AssetTransformationInput {
    document: TURNIPKO_DocumentTransformationInput
    image: TURNIPKO_ImageTransformationInput
    "Pass true if you want to validate the passed transformation parameters"
    validateOptions: Boolean = false
}

input TURNIPKO_AssetUpdateInput {
    fileName: String
    handle: String
    height: Float
    imageImg: TURNIPKO_ImageUpdateManyInlineInput
    "Manage document localizations"
    localizations: TURNIPKO_AssetUpdateLocalizationsInput
    mimeType: String
    size: Float
    width: Float
}

input TURNIPKO_AssetUpdateLocalizationDataInput {
    fileName: String
    handle: String
    height: Float
    mimeType: String
    size: Float
    width: Float
}

input TURNIPKO_AssetUpdateLocalizationInput {
    data: TURNIPKO_AssetUpdateLocalizationDataInput!
    locale: TURNIPKO_Locale!
}

input TURNIPKO_AssetUpdateLocalizationsInput {
    "Localizations to create"
    create: [TURNIPKO_AssetCreateLocalizationInput!]
    "Localizations to delete"
    delete: [TURNIPKO_Locale!]
    "Localizations to update"
    update: [TURNIPKO_AssetUpdateLocalizationInput!]
    upsert: [TURNIPKO_AssetUpsertLocalizationInput!]
}

input TURNIPKO_AssetUpdateManyInlineInput {
    "Connect multiple existing Asset documents"
    connect: [TURNIPKO_AssetConnectInput!]
    "Create and connect multiple Asset documents"
    create: [TURNIPKO_AssetCreateInput!]
    "Delete multiple Asset documents"
    delete: [TURNIPKO_AssetWhereUniqueInput!]
    "Disconnect multiple Asset documents"
    disconnect: [TURNIPKO_AssetWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Asset documents"
    set: [TURNIPKO_AssetWhereUniqueInput!]
    "Update multiple Asset documents"
    update: [TURNIPKO_AssetUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Asset documents"
    upsert: [TURNIPKO_AssetUpsertWithNestedWhereUniqueInput!]
}

input TURNIPKO_AssetUpdateManyInput {
    fileName: String
    height: Float
    "Optional updates to localizations"
    localizations: TURNIPKO_AssetUpdateManyLocalizationsInput
    mimeType: String
    size: Float
    width: Float
}

input TURNIPKO_AssetUpdateManyLocalizationDataInput {
    fileName: String
    height: Float
    mimeType: String
    size: Float
    width: Float
}

input TURNIPKO_AssetUpdateManyLocalizationInput {
    data: TURNIPKO_AssetUpdateManyLocalizationDataInput!
    locale: TURNIPKO_Locale!
}

input TURNIPKO_AssetUpdateManyLocalizationsInput {
    "Localizations to update"
    update: [TURNIPKO_AssetUpdateManyLocalizationInput!]
}

input TURNIPKO_AssetUpdateManyWithNestedWhereInput {
    "Update many input"
    data: TURNIPKO_AssetUpdateManyInput!
    "Document search"
    where: TURNIPKO_AssetWhereInput!
}

input TURNIPKO_AssetUpdateOneInlineInput {
    "Connect existing Asset document"
    connect: TURNIPKO_AssetWhereUniqueInput
    "Create and connect one Asset document"
    create: TURNIPKO_AssetCreateInput
    "Delete currently connected Asset document"
    delete: Boolean
    "Disconnect currently connected Asset document"
    disconnect: Boolean
    "Update single Asset document"
    update: TURNIPKO_AssetUpdateWithNestedWhereUniqueInput
    "Upsert single Asset document"
    upsert: TURNIPKO_AssetUpsertWithNestedWhereUniqueInput
}

input TURNIPKO_AssetUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: TURNIPKO_AssetUpdateInput!
    "Unique document search"
    where: TURNIPKO_AssetWhereUniqueInput!
}

input TURNIPKO_AssetUpsertInput {
    "Create document if it didn't exist"
    create: TURNIPKO_AssetCreateInput!
    "Update document if it exists"
    update: TURNIPKO_AssetUpdateInput!
}

input TURNIPKO_AssetUpsertLocalizationInput {
    create: TURNIPKO_AssetCreateLocalizationDataInput!
    locale: TURNIPKO_Locale!
    update: TURNIPKO_AssetUpdateLocalizationDataInput!
}

input TURNIPKO_AssetUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: TURNIPKO_AssetUpsertInput!
    "Unique document search"
    where: TURNIPKO_AssetWhereUniqueInput!
}

"Identifies documents"
input TURNIPKO_AssetWhereInput {
    "Logical AND on all given filters."
    AND: [TURNIPKO_AssetWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [TURNIPKO_AssetWhereInput!]
    "Logical OR on all given filters."
    OR: [TURNIPKO_AssetWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: TURNIPKO_DateTime
    "All values greater than the given value."
    createdAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    createdAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    createdAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    createdAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    createdAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [TURNIPKO_DateTime!]
    fileName: String
    "All values containing the given string."
    fileName_contains: String
    "All values ending with the given string."
    fileName_ends_with: String
    "All values that are contained in given list."
    fileName_in: [String!]
    "All values that are not equal to given value."
    fileName_not: String
    "All values not containing the given string."
    fileName_not_contains: String
    "All values not ending with the given string"
    fileName_not_ends_with: String
    "All values that are not contained in given list."
    fileName_not_in: [String!]
    "All values not starting with the given string."
    fileName_not_starts_with: String
    "All values starting with the given string."
    fileName_starts_with: String
    handle: String
    "All values containing the given string."
    handle_contains: String
    "All values ending with the given string."
    handle_ends_with: String
    "All values that are contained in given list."
    handle_in: [String!]
    "All values that are not equal to given value."
    handle_not: String
    "All values not containing the given string."
    handle_not_contains: String
    "All values not ending with the given string"
    handle_not_ends_with: String
    "All values that are not contained in given list."
    handle_not_in: [String!]
    "All values not starting with the given string."
    handle_not_starts_with: String
    "All values starting with the given string."
    handle_starts_with: String
    height: Float
    "All values greater than the given value."
    height_gt: Float
    "All values greater than or equal the given value."
    height_gte: Float
    "All values that are contained in given list."
    height_in: [Float!]
    "All values less than the given value."
    height_lt: Float
    "All values less than or equal the given value."
    height_lte: Float
    "All values that are not equal to given value."
    height_not: Float
    "All values that are not contained in given list."
    height_not_in: [Float!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    imageImg_every: TURNIPKO_ImageWhereInput
    imageImg_none: TURNIPKO_ImageWhereInput
    imageImg_some: TURNIPKO_ImageWhereInput
    mimeType: String
    "All values containing the given string."
    mimeType_contains: String
    "All values ending with the given string."
    mimeType_ends_with: String
    "All values that are contained in given list."
    mimeType_in: [String!]
    "All values that are not equal to given value."
    mimeType_not: String
    "All values not containing the given string."
    mimeType_not_contains: String
    "All values not ending with the given string"
    mimeType_not_ends_with: String
    "All values that are not contained in given list."
    mimeType_not_in: [String!]
    "All values not starting with the given string."
    mimeType_not_starts_with: String
    "All values starting with the given string."
    mimeType_starts_with: String
    publishedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    publishedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    publishedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    publishedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    publishedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [TURNIPKO_DateTime!]
    size: Float
    "All values greater than the given value."
    size_gt: Float
    "All values greater than or equal the given value."
    size_gte: Float
    "All values that are contained in given list."
    size_in: [Float!]
    "All values less than the given value."
    size_lt: Float
    "All values less than or equal the given value."
    size_lte: Float
    "All values that are not equal to given value."
    size_not: Float
    "All values that are not contained in given list."
    size_not_in: [Float!]
    updatedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    updatedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    updatedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    updatedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    updatedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [TURNIPKO_DateTime!]
    width: Float
    "All values greater than the given value."
    width_gt: Float
    "All values greater than or equal the given value."
    width_gte: Float
    "All values that are contained in given list."
    width_in: [Float!]
    "All values less than the given value."
    width_lt: Float
    "All values less than or equal the given value."
    width_lte: Float
    "All values that are not equal to given value."
    width_not: Float
    "All values that are not contained in given list."
    width_not_in: [Float!]
}

"References Asset record uniquely"
input TURNIPKO_AssetWhereUniqueInput {
    id: ID
}

"Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used."
input TURNIPKO_ColorInput {
    hex: TURNIPKO_Hex
    rgba: TURNIPKO_RGBAInput
}

input TURNIPKO_ConnectPositionInput {
    "Connect document after specified document"
    after: ID
    "Connect document before specified document"
    before: ID
    "Connect document at last position"
    end: Boolean
    "Connect document at first position"
    start: Boolean
}

input TURNIPKO_DocumentOutputInput {
    """

    Transforms a document into a desired file type.
    See this matrix for format support:

    PDF:    jpg, odp, ods, odt, png, svg, txt, and webp
    DOC:    docx, html, jpg, odt, pdf, png, svg, txt, and webp
    DOCX:    doc, html, jpg, odt, pdf, png, svg, txt, and webp
    ODT:    doc, docx, html, jpg, pdf, png, svg, txt, and webp
    XLS:    jpg, pdf, ods, png, svg, xlsx, and webp
    XLSX:    jpg, pdf, ods, png, svg, xls, and webp
    ODS:    jpg, pdf, png, xls, svg, xlsx, and webp
    PPT:    jpg, odp, pdf, png, svg, pptx, and webp
    PPTX:    jpg, odp, pdf, png, svg, ppt, and webp
    ODP:    jpg, pdf, png, ppt, svg, pptx, and webp
    BMP:    jpg, odp, ods, odt, pdf, png, svg, and webp
    GIF:    jpg, odp, ods, odt, pdf, png, svg, and webp
    JPG:    jpg, odp, ods, odt, pdf, png, svg, and webp
    PNG:    jpg, odp, ods, odt, pdf, png, svg, and webp
    WEBP:    jpg, odp, ods, odt, pdf, png, svg, and webp
    TIFF:    jpg, odp, ods, odt, pdf, png, svg, and webp
    AI:        jpg, odp, ods, odt, pdf, png, svg, and webp
    PSD:    jpg, odp, ods, odt, pdf, png, svg, and webp
    SVG:    jpg, odp, ods, odt, pdf, png, and webp
    HTML:    jpg, odt, pdf, svg, txt, and webp
    TXT:    jpg, html, odt, pdf, svg, and webp
    """
    format: TURNIPKO_DocumentFileTypes
}

"Transformations for Documents"
input TURNIPKO_DocumentTransformationInput {
    "Changes the output for the file."
    output: TURNIPKO_DocumentOutputInput
}

input TURNIPKO_ImageCategoryConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: TURNIPKO_ConnectPositionInput
    "Document to connect"
    where: TURNIPKO_ImageCategoryWhereUniqueInput!
}

input TURNIPKO_ImageCategoryCreateInput {
    createdAt: TURNIPKO_DateTime
    image: TURNIPKO_ImageCreateManyInlineInput
    name: String!
    updatedAt: TURNIPKO_DateTime
}

input TURNIPKO_ImageCategoryCreateManyInlineInput {
    "Connect multiple existing ImageCategory documents"
    connect: [TURNIPKO_ImageCategoryWhereUniqueInput!]
    "Create and connect multiple existing ImageCategory documents"
    create: [TURNIPKO_ImageCategoryCreateInput!]
}

input TURNIPKO_ImageCategoryCreateOneInlineInput {
    "Connect one existing ImageCategory document"
    connect: TURNIPKO_ImageCategoryWhereUniqueInput
    "Create and connect one ImageCategory document"
    create: TURNIPKO_ImageCategoryCreateInput
}

"Identifies documents"
input TURNIPKO_ImageCategoryManyWhereInput {
    "Logical AND on all given filters."
    AND: [TURNIPKO_ImageCategoryWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [TURNIPKO_ImageCategoryWhereInput!]
    "Logical OR on all given filters."
    OR: [TURNIPKO_ImageCategoryWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: TURNIPKO_DateTime
    "All values greater than the given value."
    createdAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    createdAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    createdAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    createdAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    createdAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [TURNIPKO_DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    image_every: TURNIPKO_ImageWhereInput
    image_none: TURNIPKO_ImageWhereInput
    image_some: TURNIPKO_ImageWhereInput
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    publishedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    publishedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    publishedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    publishedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    publishedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [TURNIPKO_DateTime!]
    updatedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    updatedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    updatedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    updatedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    updatedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [TURNIPKO_DateTime!]
}

input TURNIPKO_ImageCategoryUpdateInput {
    image: TURNIPKO_ImageUpdateManyInlineInput
    name: String
}

input TURNIPKO_ImageCategoryUpdateManyInlineInput {
    "Connect multiple existing ImageCategory documents"
    connect: [TURNIPKO_ImageCategoryConnectInput!]
    "Create and connect multiple ImageCategory documents"
    create: [TURNIPKO_ImageCategoryCreateInput!]
    "Delete multiple ImageCategory documents"
    delete: [TURNIPKO_ImageCategoryWhereUniqueInput!]
    "Disconnect multiple ImageCategory documents"
    disconnect: [TURNIPKO_ImageCategoryWhereUniqueInput!]
    "Override currently-connected documents with multiple existing ImageCategory documents"
    set: [TURNIPKO_ImageCategoryWhereUniqueInput!]
    "Update multiple ImageCategory documents"
    update: [TURNIPKO_ImageCategoryUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple ImageCategory documents"
    upsert: [TURNIPKO_ImageCategoryUpsertWithNestedWhereUniqueInput!]
}

input TURNIPKO_ImageCategoryUpdateManyInput {
    "No fields in updateMany data input"
    _: String
}

input TURNIPKO_ImageCategoryUpdateManyWithNestedWhereInput {
    "Update many input"
    data: TURNIPKO_ImageCategoryUpdateManyInput!
    "Document search"
    where: TURNIPKO_ImageCategoryWhereInput!
}

input TURNIPKO_ImageCategoryUpdateOneInlineInput {
    "Connect existing ImageCategory document"
    connect: TURNIPKO_ImageCategoryWhereUniqueInput
    "Create and connect one ImageCategory document"
    create: TURNIPKO_ImageCategoryCreateInput
    "Delete currently connected ImageCategory document"
    delete: Boolean
    "Disconnect currently connected ImageCategory document"
    disconnect: Boolean
    "Update single ImageCategory document"
    update: TURNIPKO_ImageCategoryUpdateWithNestedWhereUniqueInput
    "Upsert single ImageCategory document"
    upsert: TURNIPKO_ImageCategoryUpsertWithNestedWhereUniqueInput
}

input TURNIPKO_ImageCategoryUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: TURNIPKO_ImageCategoryUpdateInput!
    "Unique document search"
    where: TURNIPKO_ImageCategoryWhereUniqueInput!
}

input TURNIPKO_ImageCategoryUpsertInput {
    "Create document if it didn't exist"
    create: TURNIPKO_ImageCategoryCreateInput!
    "Update document if it exists"
    update: TURNIPKO_ImageCategoryUpdateInput!
}

input TURNIPKO_ImageCategoryUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: TURNIPKO_ImageCategoryUpsertInput!
    "Unique document search"
    where: TURNIPKO_ImageCategoryWhereUniqueInput!
}

"Identifies documents"
input TURNIPKO_ImageCategoryWhereInput {
    "Logical AND on all given filters."
    AND: [TURNIPKO_ImageCategoryWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [TURNIPKO_ImageCategoryWhereInput!]
    "Logical OR on all given filters."
    OR: [TURNIPKO_ImageCategoryWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: TURNIPKO_DateTime
    "All values greater than the given value."
    createdAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    createdAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    createdAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    createdAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    createdAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [TURNIPKO_DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    image_every: TURNIPKO_ImageWhereInput
    image_none: TURNIPKO_ImageWhereInput
    image_some: TURNIPKO_ImageWhereInput
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    publishedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    publishedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    publishedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    publishedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    publishedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [TURNIPKO_DateTime!]
    updatedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    updatedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    updatedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    updatedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    updatedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [TURNIPKO_DateTime!]
}

"References ImageCategory record uniquely"
input TURNIPKO_ImageCategoryWhereUniqueInput {
    id: ID
    name: String
}

input TURNIPKO_ImageConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: TURNIPKO_ConnectPositionInput
    "Document to connect"
    where: TURNIPKO_ImageWhereUniqueInput!
}

input TURNIPKO_ImageCreateInput {
    category: TURNIPKO_ImageCategoryCreateOneInlineInput
    createdAt: TURNIPKO_DateTime
    description: String!
    img: TURNIPKO_AssetCreateOneInlineInput!
    updatedAt: TURNIPKO_DateTime
}

input TURNIPKO_ImageCreateManyInlineInput {
    "Connect multiple existing Image documents"
    connect: [TURNIPKO_ImageWhereUniqueInput!]
    "Create and connect multiple existing Image documents"
    create: [TURNIPKO_ImageCreateInput!]
}

input TURNIPKO_ImageCreateOneInlineInput {
    "Connect one existing Image document"
    connect: TURNIPKO_ImageWhereUniqueInput
    "Create and connect one Image document"
    create: TURNIPKO_ImageCreateInput
}

"Identifies documents"
input TURNIPKO_ImageManyWhereInput {
    "Logical AND on all given filters."
    AND: [TURNIPKO_ImageWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [TURNIPKO_ImageWhereInput!]
    "Logical OR on all given filters."
    OR: [TURNIPKO_ImageWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    category: TURNIPKO_ImageCategoryWhereInput
    createdAt: TURNIPKO_DateTime
    "All values greater than the given value."
    createdAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    createdAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    createdAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    createdAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    createdAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [TURNIPKO_DateTime!]
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    img: TURNIPKO_AssetWhereInput
    publishedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    publishedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    publishedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    publishedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    publishedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [TURNIPKO_DateTime!]
    updatedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    updatedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    updatedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    updatedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    updatedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [TURNIPKO_DateTime!]
}

input TURNIPKO_ImageResizeInput {
    "The default value for the fit parameter is fit:clip."
    fit: TURNIPKO_ImageFit
    "The height in pixels to resize the image to. The value must be an integer from 1 to 10000."
    height: Int
    "The width in pixels to resize the image to. The value must be an integer from 1 to 10000."
    width: Int
}

"Transformations for Images"
input TURNIPKO_ImageTransformationInput {
    "Resizes the image"
    resize: TURNIPKO_ImageResizeInput
}

input TURNIPKO_ImageUpdateInput {
    category: TURNIPKO_ImageCategoryUpdateOneInlineInput
    description: String
    img: TURNIPKO_AssetUpdateOneInlineInput
}

input TURNIPKO_ImageUpdateManyInlineInput {
    "Connect multiple existing Image documents"
    connect: [TURNIPKO_ImageConnectInput!]
    "Create and connect multiple Image documents"
    create: [TURNIPKO_ImageCreateInput!]
    "Delete multiple Image documents"
    delete: [TURNIPKO_ImageWhereUniqueInput!]
    "Disconnect multiple Image documents"
    disconnect: [TURNIPKO_ImageWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Image documents"
    set: [TURNIPKO_ImageWhereUniqueInput!]
    "Update multiple Image documents"
    update: [TURNIPKO_ImageUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Image documents"
    upsert: [TURNIPKO_ImageUpsertWithNestedWhereUniqueInput!]
}

input TURNIPKO_ImageUpdateManyInput {
    description: String
}

input TURNIPKO_ImageUpdateManyWithNestedWhereInput {
    "Update many input"
    data: TURNIPKO_ImageUpdateManyInput!
    "Document search"
    where: TURNIPKO_ImageWhereInput!
}

input TURNIPKO_ImageUpdateOneInlineInput {
    "Connect existing Image document"
    connect: TURNIPKO_ImageWhereUniqueInput
    "Create and connect one Image document"
    create: TURNIPKO_ImageCreateInput
    "Delete currently connected Image document"
    delete: Boolean
    "Disconnect currently connected Image document"
    disconnect: Boolean
    "Update single Image document"
    update: TURNIPKO_ImageUpdateWithNestedWhereUniqueInput
    "Upsert single Image document"
    upsert: TURNIPKO_ImageUpsertWithNestedWhereUniqueInput
}

input TURNIPKO_ImageUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: TURNIPKO_ImageUpdateInput!
    "Unique document search"
    where: TURNIPKO_ImageWhereUniqueInput!
}

input TURNIPKO_ImageUpsertInput {
    "Create document if it didn't exist"
    create: TURNIPKO_ImageCreateInput!
    "Update document if it exists"
    update: TURNIPKO_ImageUpdateInput!
}

input TURNIPKO_ImageUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: TURNIPKO_ImageUpsertInput!
    "Unique document search"
    where: TURNIPKO_ImageWhereUniqueInput!
}

"Identifies documents"
input TURNIPKO_ImageWhereInput {
    "Logical AND on all given filters."
    AND: [TURNIPKO_ImageWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [TURNIPKO_ImageWhereInput!]
    "Logical OR on all given filters."
    OR: [TURNIPKO_ImageWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    category: TURNIPKO_ImageCategoryWhereInput
    createdAt: TURNIPKO_DateTime
    "All values greater than the given value."
    createdAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    createdAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    createdAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    createdAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    createdAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [TURNIPKO_DateTime!]
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    img: TURNIPKO_AssetWhereInput
    publishedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    publishedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    publishedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    publishedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    publishedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [TURNIPKO_DateTime!]
    updatedAt: TURNIPKO_DateTime
    "All values greater than the given value."
    updatedAt_gt: TURNIPKO_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: TURNIPKO_DateTime
    "All values that are contained in given list."
    updatedAt_in: [TURNIPKO_DateTime!]
    "All values less than the given value."
    updatedAt_lt: TURNIPKO_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: TURNIPKO_DateTime
    "All values that are not equal to given value."
    updatedAt_not: TURNIPKO_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [TURNIPKO_DateTime!]
}

"References Image record uniquely"
input TURNIPKO_ImageWhereUniqueInput {
    id: ID
}

"Input for a geolocation point with latitude and longitude"
input TURNIPKO_LocationInput {
    latitude: Float!
    longitude: Float!
}

input TURNIPKO_PublishLocaleInput {
    "Locales to publish"
    locale: TURNIPKO_Locale!
    "Stages to publish selected locales to"
    stages: [TURNIPKO_Stage!]!
}

"Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()"
input TURNIPKO_RGBAInput {
    a: TURNIPKO_RGBATransparency!
    b: TURNIPKO_RGBAHue!
    g: TURNIPKO_RGBAHue!
    r: TURNIPKO_RGBAHue!
}

input TURNIPKO_UnpublishLocaleInput {
    "Locales to unpublish"
    locale: TURNIPKO_Locale!
    "Stages to unpublish selected locales from"
    stages: [TURNIPKO_Stage!]!
}

input TURNIPKO_VersionWhereInput {
    id: ID!
    revision: Int!
    stage: TURNIPKO_Stage!
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601
standard for representationof dates and times using the Gregorian calendar.
"""
scalar TURNIPKO_DateTime

"Raw JSON value"
scalar TURNIPKO_Json

"""
The Long scalar type represents non-fractional signed whole numeric values. Long
can represent values between -(2^63) and 2^63 - 1.
"""
scalar TURNIPKO_Long

scalar TURNIPKO_Hex

scalar TURNIPKO_RGBAHue

scalar TURNIPKO_RGBATransparency

"""
A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard
for representation of dates using the Gregorian calendar.
"""
scalar TURNIPKO_Date

"Slate-compatible RichText AST"
scalar TURNIPKO_RichTextAST